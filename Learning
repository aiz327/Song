1.js注释使用//.
/**/的方式,在注释代码的时候,正则表达式中可能存在*,会语法错误

js的执行环境
全局执行环境、局部执行环境（只有函数？）
每个执行环境都有一个变量对象、当执行到一个函数，函数的执行环境就会被推入一个环境栈中，执行完弹出栈。
当代码在环境中执行时，创建变量对象的作用域链。作用域链的前端始终是当前环境的变量对象，如果是函数的话将函数的活动对象作为其变量对象，开始时只有arguments。作用域链的下一个对象来自外部包含环境，以此类推。
标识符解析就是沿着作用域链的前段开始一级一级搜索。

js没有块级作用域。for、if语句中的变量都在当前的执行环境中

使用 var 声明的变量会自动被添加到最接近的环境中

只有函数和全局有作用域？


对象的访问方式：.访问、[]访问（可以有变量名、保留的标识符）
Array
创建Array可以new Array（Array("red", "blue", "green”）直接由值构成或者声明好长度new Array（3）单独一个数字不会成为值，多个同前new Array(1,2,3)
调用数组的toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。如果是对象则调用每个对象的toString（）
数组的sort方法可以传入一个比较函数通过返回一个小于零、等于零或大于零进行排序
slice()方法不会影响原始数组。
slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。
如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项.

splice（）删除项，0可以不删除，后面的参数可以插入新项：
splice（0,2,"",......）
第一个参数：开始操作的位置
第二个参数：操作的数量
第三个参数以上：插入的新数组值
splice()方法始终都会返回一个数组，splice会影响原数组。splice执行后的返回值为删除的数组部分


函数是对象，函数名是指针。函数没有重载，因为函数名是指针。
函数声明与函数表达式不同点只有函数声明有函数声明提升，代码执行之前会首先将函数声明添加到执行环境
函数内部有两个特殊的对象：arguments、this
arguments不只保存了函数参数，还有一个属性callee，callee是一个指针指向拥有这个arguments的函数

this引用指向的是当前函数得以执行的环境对象（new对象和全局）
对象会作为大的执行环境（类似于windows全局），对象中的方法执行，this找寻的路径是是局部-对象，不会再去全局找，因为this是引用，指向当前函数得以运行的环境对象
var name = "zhanghuixin";
var testObj = {name:"songshuanglai"};
testObj.sayName = function(){
    console.log(this.name);
    console.log(name);
};
testObj.sayName();//songshuanglai、zhanghuixin

var a = testObj.sayName;
a();//zhanghuixin、zhanghuixin

每个函数对象都有两个方法apply和call。都是在特定的作用域中调用函数。
apply方法有两个参数，第一个是运行函数的作用域，第二个是参数数组
call方法作用与apply相同，只是传入的参数不同，第一个同样是运行函数的作用域，其余的都是传入的参数

完美的继承实现方式
----------------------------------------------------
function A(a){
  this.varA = a;
}

// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，
// 那么将 varA 加入到原型（prototype）中的目的是什么？
A.prototype = {
  varA : null,  // 既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉？
      // 也许作为一种在隐藏类中优化分配空间的考虑？
      // https://developers.google.com/speed/articles/optimizing-javascript#Initializing instance variables
      // 将会验证如果 varA 在每个实例不被特别初始化会是什么情况。
  doSomething : function(){
    // ...
  }
}

function B(a, b){
  A.call(this, a);
  this.varB = b;
}
B.prototype = Object.create(A.prototype, {
  varB : {
    value: null, 
    enumerable: true, 
    configurable: true, 
    writable: true 
  },
  doSomething : { 
    value: function(){ // override
      A.prototype.doSomething.apply(this, arguments); // call super
      // ...
    },
    enumerable: true,
    configurable: true, 
    writable: true
  }
});
B.prototype.constructor = B;

var b = new B();
b.doSomething();
----------------------------------------------------
